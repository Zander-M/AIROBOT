#include <Arduino.h>
#include "pinout.h"

// FastLED
#include <FastLED.h>
#include <Adafruit_NeoPixel.h>
#define NUM_LEDS 2

// Elegant OTA 
#include <WiFi.h>
#include <WiFiClient.h>
#include <WebServer.h>
#include <ElegantOTA.h>

const char* ssid = "test_wifi";
const char* password = "test_password";
Adafruit_NeoPixel pixels(2, LEDS, NEO_GRB + NEO_KHZ800);

WebServer server(80);

// put function declarations here:

int left_counter = 0;
int right_counter = 0;
char s[100];
int speed = 255;
int i = 0;

// OTA callbacks
unsigned long ota_progress_millis = 0;

void onOTAStart() {
  // Log when OTA has started
  Serial.println("OTA update started!");
  // <Add your own code here>
}

void onOTAProgress(size_t current, size_t final) {
  // Log every 1 second
  if (millis() - ota_progress_millis > 1000) {
    ota_progress_millis = millis();
    Serial.printf("OTA Progress Current: %u bytes, Final: %u bytes\n", current, final);
  }
}

void onOTAEnd(bool success) {
  // Log when OTA has finished
  if (success) {
    Serial.println("OTA update finished successfully!");
  } else {
    Serial.println("There was an error during OTA update!");
  }
  // <Add your own code here>
}

// Encoder interrupts
void left_counter_update(){
  if (digitalRead(E2B) == LOW){
    left_counter ++;
  } else {
    left_counter --;
  }
}

void right_counter_update(){
  if (digitalRead(E1B) == LOW){
    right_counter ++;
  } else {
    right_counter --;
  }
}
void setup() {

  Serial.begin(115200);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  server.on("/", []() {
    server.send(200, "text/plain", "Hi! This is ElegantOTA Demo.");
  });
  ElegantOTA.begin(&server);    // Start ElegantOTA
  ElegantOTA.onStart(onOTAStart);
  ElegantOTA.onProgress(onOTAProgress);
  ElegantOTA.onEnd(onOTAEnd);

  server.begin();
  Serial.println("HTTP server started");

  pixels.begin();
}

void loop() {
  pixels.clear(); // Set all pixel colors to 'off'

  // The first NeoPixel in a strand is #0, second is 1, all the way up
  // to the count of pixels minus one.
  for(int i=0; i<2; i++) { // For each pixel...

    // pixels.Color() takes RGB values, from 0,0,0 up to 255,255,255
    // Here we're using a moderately bright green color:
    pixels.setPixelColor(i, pixels.Color(0, 150, 0));

    pixels.show();   // Send the updated pixel colors to the hardware.
  delay(500);
  }

  server.handleClient();
  ElegantOTA.loop();

  // delay(1000);
  // digitalWrite(ME1A, LOW);
  // digitalWrite(ME1B, LOW);
  // delay(10);
  // sprintf(s, "%d, %d", left_counter, right_counter);
  // Serial.println(s);
  // delay(50);

  // digitalWrite(ME1A, HIGH);
  // analogWrite(ME1B, 255-speed);
  // delay(1000);

  // digitalWrite(ME1A, LOW);
  // digitalWrite(ME1B, LOW);

  // delay(10);
  // sprintf(s, "%d, %d", left_counter, right_counter);
  // Serial.println(s);
  // delay(50);

}

